<template>
	<view class="page">
		<map class="map" :style="{'width': phoneWidth+'px','height': phoneHeight + 48 + 'px'}"
			:latitude="markers[0].latitude" :longitude="markers[0].longitude" :markers="markers" :scale="17"
			:show-location="true" :polyline="polyline">
		</map>
		<cover-view class="">
			<!-- 当前打卡数:{{signCount}}|{{markers[0].latitude}} -{{markers[0].longitude}} -->
			<view class="card-cover-view">
				<view class="card-item card-time">
					<text class="text">{{distance}} km</text>
					<text class="text">里程</text>
				</view>
				<view class="card-item card-distance">
					<text class="text">{{(distance*0.06).toFixed(2)}} kcal</text>
					<text class="text">卡路里</text>
				</view>
				<view class="card-item card-speed">
					<text class="text">{{speed !== 0 ? speed +'m/s' : '0'}}</text>
					<text class="text">速度</text>
				</view>
			</view>
			<view class="card-cover-time">
				<view class="card-item card-time">
					<text
						class="text">{{parseInt(time/3600)<10?0:''}}{{parseInt(time/3600)}}:{{parseInt(time%3600/60)<10?0:''}}{{parseInt(time%3600/60)}}:{{parseInt(time%3600%60)<10?0:''}}{{parseInt(time%3600%60)}}</text>
					<text class="text">时常</text>
				</view>
			</view>
		</cover-view>
		<cover-view class="card-button-cover" :style="{'margin-top': phoneHeight*0.5 + 'px'}">
			<view class="card-button">
				<image class="card-image" v-if="active" src="@/static/images/running/suspend.png"
					@longpress="stoplocation"></image>
				<image class="card-image" v-if="!active" @click="goon" src="@/static/images/running/goon.png"></image>
				<image class="card-image" v-if="!active" @click="over" src="@/static/images/running/over.png"></image>
			</view>
		</cover-view>
	</view>
</template>

<script>
	import GpsTool from '@/util/gpsTools.js'
	export default {
		data() {
			return {
				phoneHeight: '',
				phoneWidth: '',
				gps: [],
				// 临时变量gps
				tempData: {
					latitude: '',
					longitude: '',
					timestamp: ''
				},
				// 地图覆盖物 id为1对象是当前位置
				markers: [{
					id: 1,
					latitude: 26.002194,
					longitude: 119.448814, //,
					iconPath: '@/static/locall.png',
					width: 50,
					height: 50
				}],
				// 
				polyline: [{
					points: [],
					arrowLine: true,
					color: "#efb8dd",
					borderColor: "#efb8dd",
					width: 10
				}],
				// 打卡点
				point: [
					['南天门', 119.447129, 26.001869],
					['商学楼门口', 119.446553, 26.002759],
					['图书馆门口', 119.447137, 26.003403],
					['西区篮球场旁', 119.447339, 26.004495],
					['30#计算机楼路旁', 119.447793, 26.005454],
					['工程结构试验中心门口', 119.449395, 26.005712],
					['东10前空地', 119.450339, 26.004317],
					['五期工程楼梯道路旁', 119.451315, 26.003781],
					['校车处', 119.450409, 26.003310],
					['田径场北', 119.4495980000, 26.0031870000],
				],

				// 里程 单位m
				distance: 0,
				speed: 0,
				// 打卡点数
				signCount: 0,
				// 判断用户 开始 暂停 结束 状态
				active: 1,
				time: 0,
				timeSetInterval: null,
				timeSetIntervalGps: null,
				option: {
					enableHighAccuracy: true,
					maximumAge: 1000,
					provider: "amap",
					coordsType: "gcj02",
					geocode: "false"
				},
				isShow: false,
				$u: null,
				stepCount: 0
			}
		},
		onLoad() {
			this.$u = this.$store.state.that.$u
			plus.navigator.closeSplashscreen();
			// this.initPoint()
			this.timeSetInterval = setInterval(() => {
				this.time = this.time + 1
			}, 1000)
			// this.timeSetIntervalGps
			const platform = uni.getSystemInfoSync().platform
			// 让用户授权
			uni.getLocation({
				success: (e) => {

				},
				fail: (e) => {
					console.log(e)
					this.isShow = true
				}
			})
			console.log(`当前运行平台:${platform}`)
			if (platform === 'ios') {
				this.getLocation()
			}
			if (platform === 'android') {
				const fUN_AmapLocation = uni.requireNativePlugin('FUN-AmapLocation');
			}
		},
		onBackPress(e) {
			// return true 表示禁止默认返回
			return true
		},
		onReady() {
			// 计算屏幕高度 ，宽度
			uni.getSystemInfo({
				success: res => {
					this.phoneHeight = res.windowHeight;
					this.phoneWidth = res.windowWidth;
				}
			});
		},
		methods: {
			// 初始化打卡点
			initPoint() {
				this.point.forEach(item => {
					let point = {}
					point.id = this.markers.length + 1
					point.latitude = item[2]
					point.longitude = item[1]
					point.iconPath = "@/static/check.png"
					point.width = 10
					point.height = 10
					point.callout = {
						content: item[0],
						color: 'white',
						display: 'ALWAYS'
					}
					this.markers.push(point)
				})
			},
			goon() {
				this.active = true
				this.timeSetInterval = setInterval(() => {
					this.time = this.time + 1
				}, 1000)
			},
			getLocation() {
				console.log('开始获取ios定位信息')
				plus.geolocation.watchPosition(this.handleLocation, this.handleLocationError, this.option);
			},
			// 处理定位信息
			handleLocation(e) {
				try {
					// console.log(e)
					const {
						latitude,
						longitude
					} = e.coords
					this.markers[0].latitude = latitude
					this.markers[0].longitude = longitude
					// 判断临时gps信息是否存在
					if (this.tempData.latitude === '' || this.tempData.longitude === '') {
						console.log("第一次更新gps信息，信息为：", this.tempData)
						this.tempData.latitude = latitude
						this.tempData.longitude = longitude
						this.tempData.timestamp = e.timestamp
						return
					}
					// 判断当前gps跟上一个gps是否一样
					if (this.tempData.latitude === latitude && this.tempData.longitude === longitude) return

					// 计算里程 速度
					const gpsTool = new GpsTool()
					const tempDistance = gpsTool.distance(this.tempData.latitude, this.tempData.longitude, latitude,
						longitude)
					const tempSpeed = tempDistance / ((e.timestamp - this.tempData.timestamp) / 1000)
					// 设置数据缓存
					try {
						let logStorage = uni.getStorageSync('logStorage') || []
						logStorage.push({
							timestamp: e.timestamp,
							latitude: latitude,
							longitude: longitude,
							distance: this.distance
						})
						uni.setStorageSync('logStorage', logStorage)
					} catch (e) {
						// error
						console.log('获取出错了:', e)
					}
					// 更新数据
					this.tempData.latitude = latitude
					this.tempData.longitude = longitude
					this.tempData.timestamp = e.timestamp
					if (tempSpeed <= 6.25) {
						this.distance = Number(this.distance) + Number(tempDistance / 1000)
						this.distance = this.distance.toFixed(2)
					}
					this.speed = tempSpeed.toFixed(2)
					this.polyline[0].points.push({
						latitude: latitude,
						longitude: longitude
					})
					this.polyline = [...this.polyline]
					console.log(`一次gps信息数据更新完成 里程:${this.distance} 速度:${this.speed} `)
				} catch (e) {
					console.log(e)
				}
			},
			handleLocationError(e) {
				console.log(e)
			},
			// 停止获取定位
			stoplocation() {
				clearInterval(this.timeSetInterval);
				this.active = false;
			},
			// 提交
			over() {
				// uni.redirectTo({
				// 	url: `/pages/run/runed/runed?data=${JSON.stringify({
				// 		distance: this.distance,
				// 		speed: this.speed,
				// 		time: this.time,
				// 		polyline: this.polyline
				// 	})}`
				// })
				// this.checkTime()
				// runTime + spendTime + mileage + stepCount + speed
				const runTime = Date.now()
				const str = `${runTime}${this.time}${this.distance}${this.stepCount}${this.speed}`
				console.log({
					str,
					key: this.$store.state.that.checkKey(str)
				})
				uni.showLoading({
					title: '上传数据中',
					mask: true,
					success: () => {
						this.$u.api.runcheck({
							runTime,
							spendTime: this.time,
							mileage: this.distance,
							stepCount: this.stepCount,
							speed: this.speed,
							gps: this.polyline[0].points,
							key: this.$store.state.that.checkKey(str)
						}).then(res => {
							// this.hideLoading()
							console.log(res)
							uni.redirectTo({
								url: `/pages/run/runed/runed?data=${JSON.stringify({
									distance: this.distance,
									speed: this.speed,
									time: this.time,
									polyline: this.polyline
								})}`
							})
						}).catch(e => {
							console.log(e)
						})
					}
				})
				// uni.setStorageSync('logStorage', null)
			},
			// 检查时间 大于600秒 小于7200秒
			checkTime() {
				if (this.time >= 600 && this.time <= 7200) {
					return true
				} else {
					uni.showModal({
						title: '提示',
						content: '运动时间过短,记录不会保存',
						cancelText: '继续',
						confirmText: '结束',
						success: res => {
							if (res.confirm) {
								// this.stoplocation()
								uni.switchTab({
									url: '../run/run'
								})
								uni.removeStorage({
									key: 'run',
									success() {
										console.log('移除缓存成功');
									}
								})
								console.log('用户点击确定');
							} else if (res.cancel) {
								console.log('用户点击取消');
							}
						}
					})
					return false
				}
			},
			// 判断打卡
			isSign(realGps) {
				const gpsTool = new GpsTool()
				let signCount = this.point.filter(item => {
					let distance = gpsTool.distance(realGps.latitude, realGps.longitude, item[2], item[1])
					if (distance <= 50) {
						return true
					} else {
						return false
					}
				})
				if (signCount.length > 0) {
					let index = this.point.findIndex(item => item[0] === signCount[0][0])
					this.point.splice(index, 1)
					return true
				} else {
					return false
				}
			},
			// 检查打卡点数量 需大于2个点
			checkSign() {
				if (this.signCount >= 2) {
					return true
				} else {
					uni.showModal({
						title: '提示',
						content: '打卡点未满足2个',
						cancelText: '继续',
						confirmText: '结束',
						success: res => {
							if (res.confirm) {
								// this.stoplocation()
								uni.switchTab({
									url: '../run/run'
								})
								console.log('用户点击确定');
							} else if (res.cancel) {
								console.log('用户点击取消');
							}
						}
					})
					return false
				}
			},
			// 检查数量 需大于2000
			checkDistance() {
				if (this.distance >= 2000) {
					return true
				} else {
					uni.showModal({
						title: '提示',
						cancelText: '继续',
						content: '距离小于2km，此次记录不会保存',
						success(res) {
							if (res.confirm) {
								uni.switchTab({
									url: '../run/run'
								})
								console.log('用户点击确定');
							} else if (res.cancel) {
								console.log('用户点击取消');
								that.getLocation();
							}
						}
					})
					return false
				}
			}
		}
	}
</script>

<style scoped lang="scss">
	.map {
		position: absolute;
	}

	.card-cover-view {
		background-color: #FFFFFF;
		padding: 10upx;
		margin: 48px 20upx 0 20upx;
		border-radius: 20upx 20upx 0 0;
		flex-direction: row;
		justify-content: center;
		overflow: hidden;
	}

	.card-cover-time {
		background-color: #FFFFFF;
		padding: 10upx;
		margin: 0 20upx 20upx 20upx;
		border-radius: 0 0 20upx 20upx;
		flex-direction: row;
		justify-content: center;
	}

	.card-item {
		flex-direction: column;
		justify-content: center;
		align-items: center;
		text-align: center;
		margin: 20upx;
		// width: 200upx;
		// height: 200upx;
	}

	.text {
		padding: 10upx;
	}

	.card-button-cover {
		// position: absolute;
		// bottom: 0;
		// margin-top: 1000upx;
	}

	.card-button {
		justify-content: center;
		align-items: center;
		flex-direction: row;
	}

	.card-image {
		width: 250upx;
		height: 250upx;
	}
</style>
