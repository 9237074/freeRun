<template>
	<view class="page">
		<map class="map" :style="{'width': phoneWidth+'px','height': phoneHeight + 48 + 'px'}"
			:latitude="markers[0].latitude" :longitude="markers[0].longitude" :markers="markers" :scale="17" :show-location="true">
		</map>
		<cover-view class="">
			<!-- 当前打卡数:{{signCount}}|{{markers[0].latitude}} -{{markers[0].longitude}} -->
			<view class="card-cover-view">
				<view class="card-item card-time">
					<text class="text">{{parseInt(time/3600)<10?0:''}}{{parseInt(time/3600)}}:{{parseInt(time%3600/60)<10?0:''}}{{parseInt(time%3600/60)}}:{{parseInt(time%3600%60)<10?0:''}}{{parseInt(time%3600%60)}}</text>
					<text class="text">时常</text>
				</view>
				<view class="card-item card-distance">
					<text class="text">{{(distance*0.06).toFixed(2)}}</text>
					<text class="text">卡路里</text>
				</view>
				<view class="card-item card-speed">
					<text class="text">{{speed !== 0 ? speed +'m/s' : '0'}}</text>
					<text class="text">速度</text>
				</view>
			</view>
		</cover-view>
		<cover-view class="card-button-cover" :style="{'margin-top': phoneHeight*0.62 + 'px'}">
			<view class="card-button">
				<image class="card-image" v-if="active" src="@/static/images/running/goon.png" @longpress="stoplocation"></image>
				<image class="card-image" v-if="!active" @click="active=true;" src="@/static/images/running/goon.png"></image>
				<image class="card-image" v-if="!active" @click="over" src="@/static/images/running/goon.png"></image>
			</view>
		</cover-view>
	</view>
</template>

<script>
	// import GpsTool from '@/util/gpsTools.js'
	// const music = require('@/static/aduio/01.mp3')
	export default {
		data() {
			return {
				phoneHeight: '',
				phoneWidth: '',
				// gps日志
				// 过滤后
				gps: [],
				// 临时变量gps
				tempGps: {
					latitude: '',
					longitude: ''
				},
				// 地图覆盖物 id为1对象是当前位置
				markers: [{
					id: 1,
					latitude: 26.002194,
					longitude: 119.448814, //,
					iconPath: '@/static/locall.png',
					width: 10,
					height: 10
				}],
				// 打卡点
				point: [
					['田径场南', 119.448814, 26.002194],
					['南天门', 119.447129, 26.001869],
					['商学楼门口', 119.446553, 26.002759],
					['图书馆门口', 119.447137, 26.003403],
					['西区篮球场旁', 119.447339, 26.004495],
					['30#计算机楼路旁', 119.447793, 26.005454],
					['工程结构试验中心门口', 119.449395, 26.005712],
					['东10前空地', 119.450339, 26.004317],
					['五期工程楼梯道路旁', 119.451315, 26.003781],
					['东12宿舍楼道路旁', 119.452183, 26.003010],
					['校车处', 119.450409, 26.003310],
					['田径场北', 119.4495980000, 26.0031870000],
				],
				// 轨迹图
				polyline: [{
					points: [],
					arrowLine: true,
					color: "#0AAC61",
					borderColor: "#0AAC61"
				}],
				// 里程 单位m
				distance: 0,
				speed: 0,
				// 打卡点数
				signCount: 0,
				// 判断用户 开始 暂停 结束 状态
				active: 1,
				time: 0,
				timeSetInterval: null,
				timeSetIntervalGps: null
			}
		},
		onLoad() {
			// this.initPoint()
			// this.getLocation()
			setInterval(() => {
				this.time = this.time + 1
			}, 1000)
		},
		onBackPress(e) {
			// return true 表示禁止默认返回
			return true
		},
		onReady() {
			// 计算屏幕高度 ，宽度
			uni.getSystemInfo({
				success:res => {
					this.phoneHeight = res.windowHeight;
					this.phoneWidth = res.windowWidth;
					console.log(res)
				}
			});
		},
		methods: {
			// 初始化打卡点
			initPoint() {
				this.point.forEach(item => {
					let point = {}
					point.id = this.markers.length + 1
					point.latitude = item[2]
					point.longitude = item[1]
					point.iconPath = "@/static/check.png"
					point.width = 10
					point.height = 10
					point.callout = {
						content: item[0],
						color: 'white',
						display: 'ALWAYS'
					}
					this.markers.push(point)
				})
			},
			getLocationSync() {
				return new Promise((resolve, reject) => {
					uni.getLocation({
						type: "gcj02",
						success: (res) => {
							resolve(res)
						},
						fail: (err) => {
							reject(err)
						}
					})
				})
			},
			getLocation() {
				// 开启 时间 定时器
				// this.timeSetInterval = setInterval(() => {
				// 	// this.time = new Date().getTime() / 1000 - this.startTime
				// 	if (this.globalData.platform !== 'ios') {
				// 		let bgm = uni.getBackgroundAudioManager()
				// 		bgm.src = music
				// 		bgm.play()
				// 	}
				// 	this.time++
				// }, 1000)
				this.timeSetIntervalGps = setInterval(async()=>{
					let gpsInfo = await this.getLocationSync()
					this.handleLocation(gpsInfo)
				},1000)
			},
			// 处理定位信息
			handleLocation(e) {
				let curTime = parseInt(new Date().getTime() / 1000)
				// 真实的gps信息
				let realGps = {
					latitude: e.latitude,
					longitude: e.longitude,
					timestamp: curTime
				}

				// 合并this.markers
				this.markers[0] = Object.assign(this.markers[0], realGps)
				if (!this.tempGps.latitude || !this.tempGps.longitude) {
					this.tempGps = JSON.parse(JSON.stringify(realGps))
					return
				}
				// 判断当前gps跟上一个gps是否一样
				if (this.tempGps.latitude === realGps.latitude && this.tempGps.longitude === realGps.longitude) {
					// console.log('updateTime:', this.tempGps.timestamp, realGps.timestamp, realGps.timestamp - this.tempGps.timestamp)
					this.tempGps.timestamp = realGps.timestamp
					return
				}
				console.log('不相等。')
				let gpsTool = new GpsTool()
				let tempDistance = gpsTool.distance(this.tempGps.latitude, this.tempGps.longitude, realGps.latitude,
					realGps.longitude)
				let tempSpeed = tempDistance / parseInt(realGps.timestamp - this.tempGps.timestamp)
				try {
					let logStorage = uni.getStorageSync('logStorage') || []
					logStorage.push({
						timestamp: curTime,
						latitude: realGps.latitude,
						longitude: realGps.longitude,
						distance: tempDistance
					})
					uni.setStorageSync('logStorage', logStorage)
				} catch (e) {
					// error
					console.log('获取出错了:', e)
				}
				console.log()
				console.log(this.tempGps, realGps, '距离:', tempDistance, '时间:', parseInt(realGps.timestamp - this.tempGps
					.timestamp), '速度:', tempDistance / parseInt(realGps.timestamp - this.tempGps.timestamp))
				if (tempSpeed > 6.25) return
				this.tempGps = JSON.parse(JSON.stringify(realGps))
				this.distance += tempDistance
				this.speed = tempSpeed.toFixed(2)
				this.polyline[0].points.push({
					latitude: realGps.latitude,
					longitude: realGps.longitude
				})
				gpsTool = null
				if (this.isSign(realGps)) this.signCount++
			},
			// 停止获取定位
			stoplocation: function() {
				clearInterval(this.timeSetInterval);
				clearInterval(this.timeSetIntervalGps)
				this.active = false;
			},
			// 提交
			over: function() {

			},
			// 检查时间 大于600秒 小于7200秒
			checkTime: function() {
				if (this.time >= 600 && this.time <= 7200) {
					return true
				} else {
					uni.showModal({
						title: '提示',
						content: '运动时间过短,记录不会保存',
						cancelText: '继续',
						confirmText: '结束',
						success: res => {
							if (res.confirm) {
								// this.stoplocation()
								uni.switchTab({
									url: '../run/run'
								})
								uni.removeStorage({
									key: 'run',
									success() {
										console.log('移除缓存成功');
									}
								})
								console.log('用户点击确定');
							} else if (res.cancel) {
								console.log('用户点击取消');
							}
						}
					})
					return false
				}
			},
			// 判断打卡
			isSign(realGps) {
				const gpsTool = new GpsTool()
				let signCount = this.point.filter(item => {
					let distance = gpsTool.distance(realGps.latitude, realGps.longitude, item[2], item[1])
					if (distance <= 50) {
						return true
					} else {
						return false
					}
				})
				if (signCount.length > 0) {
					let index = this.point.findIndex(item => item[0] === signCount[0][0])
					this.point.splice(index, 1)
					return true
				} else {
					return false
				}
			},
			// 检查打卡点数量 需大于2个点
			checkSign() {
				if (this.signCount >= 2) {
					return true
				} else {
					uni.showModal({
						title: '提示',
						content: '打卡点未满足2个',
						cancelText: '继续',
						confirmText: '结束',
						success: res => {
							if (res.confirm) {
								// this.stoplocation()
								uni.switchTab({
									url: '../run/run'
								})
								console.log('用户点击确定');
							} else if (res.cancel) {
								console.log('用户点击取消');
							}
						}
					})
					return false
				}
			},
			// 检查数量 需大于2000
			checkDistance() {
				if (this.distance >= 2000) {
					return true
				} else {
					uni.showModal({
						title: '提示',
						cancelText: '继续',
						content: '距离小于2km，此次记录不会保存',
						success: function(res) {
							if (res.confirm) {
								uni.switchTab({
									url: '../run/run'
								})
								console.log('用户点击确定');
							} else if (res.cancel) {
								console.log('用户点击取消');
								that.getLocation();
							}
						}
					})
					return false
				}
			}
		}
	}
</script>

<style scoped lang="scss">
	.map {
		position: absolute;
	}

	.card-cover-view {
		background-color: #FFFFFF;
		padding: 20upx;
		margin: 48px 20upx 20upx 20upx;
		border-radius: 20upx;
		flex-direction: row;
		justify-content:center;
	}
	.card-item{
		flex-direction: column;
		justify-content: center;
		align-items: center;
		text-align: center;
		margin: 20upx;
		// width: 200upx;
		// height: 200upx;
	}
	.text{
		padding: 10upx;
	}
	.card-button-cover{
		// position: absolute;
		// bottom: 0;
		// margin-top: 1000upx;
	}
	.card-button{
		justify-content: center;
		align-items: center;
		flex-direction: row;
	}
	.card-image{
		width: 250upx;
		height: 250upx;
	}
</style>
